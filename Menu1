#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

if [[ -e /etc/debian_version ]]; then
	OS=debian
	RCLOCAL='/etc/rc.local'
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
	RCLOCAL='/etc/rc.d/rc.local'
	chmod +x /etc/rc.d/rc.local
else
	echo "ดูเหมือนว่าคุณไม่ได้เรียกใช้โปรแกรมติดตั้งนี้ on Debian, Ubuntu or Centos system"
	exit
fi
color1='\e[031;1m'
color2='\e[34;1m'
color3='\e[0m'
echo "--------------- Welcome To Premium Script Menu ---------------"
	echo "------------ Modified by Ekkachai Chompoowiset -----------"
	echo " "
	cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
	cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
	freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
	tram=$( free -m | awk 'NR==2 {print $2}' )
	swap=$( free -m | awk 'NR==4 {print $2}' )
	up=$(uptime|awk '{ $1=$2=$(NF-6)=$(NF-5)=$(NF-4)=$(NF-3)=$(NF-2)=$(NF-1)=$NF=""; print }')

	echo -e "\e[032;1mCPU Model:\e[0m $cname"
	echo -e "\e[032;1mNumber Of Cores:\e[0m $cores"
	echo -e "\e[032;1mCPU Frequency:\e[0m $freq MHz"
	echo -e "\e[032;1mTotal Amount Of RAM:\e[0m $tram MB"
	echo -e "\e[032;1mTotal Amount Of Swap:\e[0m $swap MB"
	echo -e "\e[032;1mSystem Uptime:\e[0m $up"
	echo -e "-----------------------------------------------------"
	echo ""
	echo -e "-----=[ SSH & OpenVPN Section ]=-----"
	echo -e "${color1}1${color3}.สร้างบัญชีผู้ใช้ (${color2}user-add${color3})"
	echo -e "${color1}2${color3}.สร้างบัญชีสุ่ม (${color2}user-generate${color3})"
	echo -e "${color1}3${color3}.สร้างบัญชีทดลอง (${color2}trial${color3})"
	echo -e "${color1}4${color3}.เพิ่มระยะเวลาใช้งานบัญชี SSH & OpenVPN (${color2}user-aktif${color3})"
	echo -e "${color1}5${color3}.เปลี่ยนรหัสผ่านบัญชีผู้ใช้ (${color2}user-password${color3})"
	echo -e "${color1}6${color3}.ห้ามผู้ใช้ล็อกอินหลายราย (${color2}user-ban${color3})"
	echo -e "${color1}7${color3}.บัญชีผู้ใช้ที่ถูกแบน (${color2}user-unban${color3})"
	echo -e "${color1}8${color3}.ล็อคบัญชีผู้ใช้ (${color2}user-lock${color3})"
	echo -e "${color1}9${color3}.ปลดล็อคบัญชีผู้ใช้ (${color2}user-unlock${color3})"
	echo -e "${color1}10${color3}.ลบบัญชีผู้ใช้ (${color2}user-delete${color3})"
	echo -e "${color1}11${color3}.รายละเอียดบัญชีผู้ใช้ (${color2}user-detail${color3})"
	echo -e "${color1}12${color3}.แสดงรายการผู้ใช้ (${color2}user-list${color3})"
	echo -e "${color1}13${color3}.ตรวจสอบการเข้าสู่ระบบบัญชี (${color2}user-login${color3})"
	echo -e "${color1}14${color3}.ตรวจสอบบันทึกการเข้าสู่ระบบ Dropbear & OpenSSH (${color2}user-log${color3})"
	echo -e "${color1}15${color3}.เข้าสู่ระบบหลายบัญชี (${color2}user-limit${color3})"
	echo -e "${color1}16${color3}.ตั้งขีดจำกัดการเข้าสู่ระบบหลายรายการ (${color2}autokill${color3})"
	echo -e "${color1}17${color3}.แสดงบัญชีผู้ใช้ใกล้หมดอายุ (${color2}infouser${color3})"
	echo -e "${color1}18${color3}.ตรวจสอบบัญชีผู้ใช้ที่หมดอายุ (${color2}expireduser${color3})"
	echo -e "${color1}19${color3}.ลบบัญชีผู้ใช้ที่หมดอายุ (${color2}user-delete-expired${color3})"
	echo -e "${color1}20${color3}.ล็อคบัญชีผู้ใช้ที่หมดอายุ(${color2}user-expire${color3})"
	echo -e "${color1}21${color3}.แสดงบัญชีผู้ใช้ที่ถูกล็อค  (${color2}log-limit${color3})"
	echo -e "${color1}22${color3}.ตรวจสอบบัญชีผู้ใช้ที่ถูกแบน(${color2}log-ban${color3})"
	echo -e " "
	echo -e "-----=[ PPTP VPN Section ]=-----"
	echo -e "${color1}23${color3}.สร้างบัญชี PPTP(${color2}user-add-pptp${color3})"
	echo -e "${color1}24${color3}.ลบบัญชี PPTP(${color2}user-delete-pptp${color3})"
	echo -e "${color1}25${color3}.ดูรายละเอียดบัญชี PPTP (${color2}user-detail-pptp${color3})"
	echo -e "${color1}26${color3}.ตรวจสอบการเข้าสู่ระบบบัญชี PPTP (${color2}user-login-pptp${color3})"
	echo -e "${color1}27${color3}.ดูรายการบัญชี PPTP (${color2}alluser-pptp${color3})"
	echo -e " "
	echo -e "-----=[ VPS Section ]=-----"
	echo -e "${color1}28${color3}.เซิร์ฟเวอร์ทดสอบความเร็ว (${color2}speedtest --share${color3})"
	echo -e "${color1}29${color3}.เซิร์ฟเวอร์เกณฑ์มาตรฐาน (${color2}bench-network${color3})"
	echo -e "${color1}30${color3}.ตรวจสอบการใช้ RAM ของเซิร์ฟเวอร์ (${color2}ram${color3})"
	echo -e "${color1}31${color3}.รีสตาร์ท Stunnel (${color2}service stunnel restart${color3})"
	if [[ "$OS" = 'debian' ]]; then 
	echo -e "${color1}32${color3}.รีสตาร์ท OpenSSH (${color2}service ssh restart${color3})"
	echo -e "${color1}33${color3}.รีสตาร์ท Dropbear (${color2}service dropbear restart${color3})"
	echo -e "${color1}34${color3}.รีสตาร์ท OpenVPN (${color2}service openvpn restart${color3})"
	echo -e "${color1}35${color3}.รีสตาร์ท PPTP VPN (${color2}service pptpd restart${color3})"
	echo -e "${color1}36${color3}.รีสตาร์ท Webmin (${color2}service webmin restart${color3})"
	echo -e "${color1}37${color3}.รีสตาร์ท Squid Proxy (${color2}service squid3 restart${color3})"
else
	echo -e "${color1}32${color3}.รีสตาร์ท OpenSSH (${color2}service sshd restart${color3})"
	echo -e "${color1}33${color3}.รีสตาร์ท Dropbear (${color2}service dropbear restart${color3})"
	echo -e "${color1}34${color3}.รีสตาร์ท OpenVPN (${color2}service openvpn restart${color3})"
	echo -e "${color1}35${color3}.รีสตาร์ท PPTP VPN (${color2}service pptpd restart${color3})"
	echo -e "${color1}36${color3}.รีสตาร์ท Webmin (${color2}service webmin restart${color3})"
	echo -e "${color1}37${color3}.รีสตาร์ท Squid Proxy (${color2}service squid restart${color3})"
fi
echo -e "${color1}38${color3}.แก้ไขพอร์ตเซิร์ฟเวอร์ (${color2}edit-port${color3})"
echo -e "${color1}39${color3}.ตั้งค่าการรีบูตอัตโนมัติ (${color2}auto-reboot${color3})"
echo -e "${color1}40${color3}.รีบูต VPS (${color2}reboot${color3})"
echo -e "${color1}41${color3}.เปลี่ยนรหัสผ่านเซิร์ฟเวอร์ (${color2}passwd${color3})"
echo -e " "
echo -e "-----=[ Others ]=-----"
echo -e "${color1}42${color3}.ดูบันทึกการติดตั้ง (${color2}log-install${color3})"
echo -e "${color1}43${color3}.การวินิจฉัย VPS (${color2}diagnosa${color3})"
echo -e "${color1}44${color3}.ออกจากเมนู (${color2}exit${color3})"
echo -e "${color1}45${color3}.แก้ไขพอร์ต dropbear (${color2}exit${color3})"
echo -e "${color1}46${color3}.แก้ไขพอร์ต-openssh (${color2}exit${color3})"
echo -e "${color1}47${color3}.แก้ไขพอร์ต openvpn (${color2}exit${color3})"
echo -e "${color1}48${color3}.แก้ไขพอร์ต proxy (${color2}exit${color3})"
echo -e "${color1}00${color3}.อัปเดตสคริปต์พรีเมียม"
echo "-------------------------------------------"
echo ""	
echo ""
read -p "เลือกหัวข้อเมนูที่ต้องการใช้งาน : " MENU
echo ""
case $MENU in

		1) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
  echo ""
  echo ""
  echo ""
IP=$(wget -qO- ipv4.icanhazip.com)
read -p "        Username       : " username
egrep "^$username" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
echo "Username already exists in your VPS"
exit 0
else
read -p "        Password       : " password
read -p "        How many days? : " masa_aktif
MYIP=$(wget -qO- ipv4.icanhazip.com)
today=`date +%s`
masa_aktif_detik=$(( $masa_aktif * 86400 ))
saat_expired=$(($today + $masa_aktif_detik))
tanggal_expired=$(date -u --date="1970-01-01 $saat_expired sec GMT" +%Y/%m/%d)
tanggal_expired_display=$(date -u --date="1970-01-01 $saat_expired sec GMT" '+%d %B %Y')
clear
echo "Connecting to Server..."
sleep 0.5
echo "Creating Account..."
sleep 0.5
echo "Generating Host..."
sleep 0.5
echo "Generating Your New Username: $username"
sleep 0.5
echo "Generating Password: $password"
sleep 1

useradd $username
usermod -s /bin/false $username
usermod -e  $tanggal_expired $username
  egrep "^$username" /etc/passwd >/dev/null
  echo -e "$password\n$password" | passwd $username
  clear
  echo ""
  echo ""
  echo ""
  echo "---------------------------------------"
  echo "            ACCOUNT DETAILS            "
  echo "---------------------------------------" 
  echo "   Host/IP         : $IP"
  echo "   Username        : $username"
  echo "   Password        : $password"
  echo "   OpenSSH         : 22, 443"
  echo "   Dropbear        : 443, 110, 109"
  echo "   Squid Proxy     : 80, 8080, 8000, 3128"
  echo "   Active Time     : $masa_aktif Days"
  echo "   Date Expired    : $tanggal_expired_display"
  echo "   OpenVPN Config  : http://$IP/client.ovpn"
  echo "---------------------------------------"
  echo " "
  echo " "
  echo " "
fi
	;;
		2) # ==================================================================================================================
	
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456
red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

IP=$(wget -qO- ipv4.icanhazip.com)
read -p "How many accounts will be created?: " banyakuser
read -p "How many days?                    : " aktif
today="$(date +"%Y-%m-%d")"
expire=$(date -d "$aktif days" +"%Y-%m-%d")
clear
echo " "
echo " "
echo " "
echo "-----------------------------------"
echo "        Account Information        "
echo "-----------------------------------"
echo "   Host/IP        : $IP"
echo "   OpenSSH        : 22, 443"
echo "   Dropbear       : 443, 110, 109"
echo "   Squid Proxy    : 80, 8080, 8000, 3128"
echo "   OpenVPN Config : http://$IP/client.ovpn"
echo "   Until On       : $(date -d "$aktif days" +"%d-%m-%Y")"
  echo "----------------------------------"
for (( i=1; i <= $banyakuser; i++ ))
do
	USER=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1`
	useradd -M -N -s /bin/false -e $expire $USER
	PASS=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1`;
	echo $USER:$USER | chpasswd
	echo "$i. Username/Password: $USER"
done

  echo "--------------------------------------"
  echo " "
  ;;
		3) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

IP=`dig +short myip.opendns.com @resolver1.opendns.com`

Login=trial`</dev/urandom tr -dc X-Z0-9 | head -c4`
hari="1"
Pass=`</dev/urandom tr -dc a-f0-9 | head -c9`

useradd -e `date -d "$hari days" +"%Y-%m-%d"` -s /bin/false -M $Login
echo -e "$Pass\n$Pass\n"|passwd $Login &> /dev/null
echo -e ""
echo -e ""
echo -e ""
echo -e "-----------------------------"
echo -e "    Trial Account Details    "
echo -e "-----------------------------"
echo -e "   Host     : $IP            " 
echo -e "   Username : $Login         "
echo -e "   Password : $Pass\n        "
echo -e "-----------------------------"
echo -e ""
echo -e ""
	;;
		4) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

echo " "
echo " "
echo " "
read -p "Iput Username to Renew  : " username
egrep "^$username" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
read -p "How many days to extend?: " masa_aktif

today=`date +%s`
masa_aktif_detik=$(( $masa_aktif * 86400 ))
saat_expired=$(($today + $masa_aktif_detik))
tanggal_expired=$(date -u --date="1970-01-01 $saat_expired sec GMT" +%Y/%m/%d)
tanggal_expired_display=$(date -u --date="1970-01-01 $saat_expired sec GMT" '+%d %B %Y')
clear
echo "Connecting to Server..."
sleep 0.5
echo "Adding time..."
sleep 0.5
passwd -u $username
usermod -e  $tanggal_expired $username
  egrep "^$username" /etc/passwd >/dev/null
  echo -e "$password\n$password" | passwd $username
  clear
  echo " "
  echo " "
  echo "---------------------------------------"
  echo "       Extended Account Details        "
  echo "---------------------------------------"
  echo "   Username        : $username"
  echo "   Active Time     : $masa_aktif Days"
  echo "   Date Expired    : $tanggal_expired_display"
  echo "--------------------------------------"
  echo " "

else
echo -e "Username ${red}$username${NC} not found in your VPS"
exit 0
fi
	;;
		5) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
blue='\e[1;34m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
clear
echo " "
echo " "
echo " "
read -p "Input USERNAME to change password: " username
egrep "^$username" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
read -p "Input new PASSWORD for user $username: " password

clear
echo "Connecting to Server..."
sleep 0.5
echo "Generating New Password..."
sleep 0.5
  egrep "^$username" /etc/passwd >/dev/null
  echo -e "$password\n$password" | passwd $username
  clear
  echo " "
  echo " "
  echo " "
  echo "-------------------------------------------"
  echo -e "Password for user ${blue}$username${NC} successfully changed."
  echo -e "The new Password for user ${blue}$username${NC} is ${red}$password${NC}"
  echo "-------------------------------------------"
  echo " "
  echo " "
  echo " "

else
echo " "
echo -e "Username ${red}$username${NC} not found in your VPS"
echo " "
exit 0
fi
	;;
		6) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
MAX=2
if [ -e "/var/log/auth.log" ]; then
        OS=1;
        LOG="/var/log/auth.log";
fi
if [ -e "/var/log/secure" ]; then
        OS=2;
        LOG="/var/log/secure";
fi
if [[ ${1+x} ]]; then
        MAX=$1;
fi
echo " "
echo " "
echo "-------------------------------------------"
echo "Users Who Login More Than The Limit Of [$MAX]"
echo "-------------------------------------------"
while :
do
        cat /etc/passwd | grep "/home/" | cut -d":" -f1 > /root/user.txt
        username1=( `cat "/root/user.txt" `);
        i="0";
        for user in "${username1[@]}"
			do
                username[$i]=`echo $user | sed 's/'\''//g'`;
                jumlah[$i]=0;
                i=$i+1;
			done
        cat $LOG | grep -i dropbear | grep -i "Password auth succeeded" > /tmp/log-db.txt
        proc=( `ps aux | grep -i dropbear | awk '{print $2}'`);
        for PID in "${proc[@]}"
			do
                cat /tmp/log-db.txt | grep "dropbear\[$PID\]" > /tmp/log-db-pid.txt
                NUM=`cat /tmp/log-db-pid.txt | wc -l`;
                USER=`cat /tmp/log-db-pid.txt | awk '{print $10}' | sed 's/'\''//g'`;
                IP=`cat /tmp/log-db-pid.txt | awk '{print $12}'`;
                if [ $NUM -eq 1 ]; then
                        i=0;
                        for user1 in "${username[@]}"
							do
                                if [ "$USER" == "$user1" ]; then
                                        jumlah[$i]=`expr ${jumlah[$i]} + 1`;
                                        pid[$i]="${pid[$i]} $PID"
                                fi
                                i=$i+1;
							done
                fi
			done
        cat $LOG | grep -i sshd | grep -i "Accepted password for" > /tmp/log-db.txt
        data=( `ps aux | grep "\[priv\]" | sort -k 72 | awk '{print $2}'`);
        for PID in "${data[@]}"
			do
                cat /tmp/log-db.txt | grep "sshd\[$PID\]" > /tmp/log-db-pid.txt;
                NUM=`cat /tmp/log-db-pid.txt | wc -l`;
                USER=`cat /tmp/log-db-pid.txt | awk '{print $9}'`;
                IP=`cat /tmp/log-db-pid.txt | awk '{print $11}'`;
                if [ $NUM -eq 1 ]; then
                        i=0;
                        for user1 in "${username[@]}"
							do
                                if [ "$USER" == "$user1" ]; then
                                        jumlah[$i]=`expr ${jumlah[$i]} + 1`;
                                        pid[$i]="${pid[$i]} $PID"
                                fi
                                i=$i+1;
							done
                fi
        done
        j="0";
        for i in ${!username[*]}
			do
                if [ ${jumlah[$i]} -gt $MAX ]; then
                        date=`date +"%Y-%m-%d %X"`;
                        echo "VPS-Murah.net - $date - ${username[$i]} - ${jumlah[$i]}";
                        echo "VPS-Murah.net - $date - ${username[$i]} - ${jumlah[$i]}" >> /root/log-ban.txt;
                        passwd -l ${username[$i]}
						kill ${pid[$i]};
                        pid[$i]="";
                        j=`expr $j + 1`;
                fi
			done
        if [ $j -gt 0 ]; then
                if [ $OS -eq 1 ]; then
                        service ssh restart > /dev/null 2>&1;
                fi
                if [ $OS -eq 2 ]; then
                        service sshd restart > /dev/null 2>&1;
                fi
                service dropbear restart > /dev/null 2>&1;
                j=0;
		fi
sleep 300;
done
	;;
		7) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

cyan='\e[0;36m'
red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
clear
echo " "
echo " "
echo " "
read -p "Input USERNAME to unban: " username
egrep "^$username" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
# proses mengganti passwordnya
passwd -u $username
clear
  echo " "
  echo " "
  echo " "
  echo "-------------------------------------------"
  echo -e "Username ${cyan}$username${NC} successfully ${green}UNBANNED${NC}."
  echo -e "Password for Username ${cyan}$username${NC} has been restored"
  echo "-------------------------------------------"
  echo " "
  echo " "
else
echo " "
echo -e "Username ${red}$username${NC} not found in your VPS."
echo " "
	exit 1
fi
	;;
		8) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
echo " "
echo " "
read -p "Input Username you want to lock: " username
egrep "^$username" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
# proses mengganti passwordnya
passwd -l $username
clear
  echo " "
  echo " "
  echo " "
  echo "-----------------------------------------------"
  echo -e "Username ${blue}$username${NC} successfully ${red}LOCKED!${NC}."
  echo -e "Access Login to username ${blue}$username${NC} has been locked."
  echo "-----------------------------------------------"
else
echo "Username not found on your server."
    exit 1
fi
	;;
		9) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
blue='\e[1;34m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
clear
echo " "
echo " "
echo " "
read -p "Input USERNAME to unlock: " username
egrep "^$username" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
# proses mengganti passwordnya
passwd -u $username
clear
  echo " "
  echo " "
  echo " "
  echo "-------------------------------------------"
  echo -e "Username ${blue}$username${NC} successfully ${green}UNLOCKED${NC}."
  echo -e "Access for Username ${blue}$username${NC} has been restored"
  echo "-------------------------------------------"
else
echo " "
echo -e "Username ${red}$username${NC} not found in your server."
echo " "    
	exit 1
fi
	;;
		10) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
blue='\e[1;34m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

read -p "Input Username you want to remove: " username
egrep "^$username" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
# proses mengganti passwordnya
userdel -f $username
clear
  echo " "
  echo " "
  echo " "
  echo "-----------------------------------------------"
  echo -e "Username ${blue}$username${NC} successfully ${red}REMOVE${NC}."
  echo -e "Login access for username ${blue}$username${NC} has been deleted"
  echo "-----------------------------------------------"
else
echo "Username not found on your server"
    exit 1
fi
	
	;;
		11) # ==================================================================================================================
	
		#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

if [ "$1" = "" ]
then
        echo
        echo "How to use: $0 Username"
        echo "Example:  $0 0123456"
        echo
        exit 1
fi

Username=`cat /etc/passwd | grep -Ew ^$1 | cut -d":" -f1`

if [ "$Username" = "" ]
then
        echo "Username $1 not found"
        exit 2
fi

Userid=`cat /etc/passwd | grep -Ew ^$Username | cut -d":" -f3`
UserPrimaryGroupId=`cat /etc/passwd | grep -Ew ^$Username | cut -d":" -f4`
UserPrimaryGroup=`cat /etc/group | grep :"$UserPrimaryGroupId": | cut -d":" -f1`
UserInfo=`cat /etc/passwd | grep -Ew ^$Username | cut -d":" -f5`
UserHomeDir=`cat /etc/passwd | grep -Ew ^$Username | cut -d":" -f6`
UserShell=`cat /etc/passwd | grep -Ew ^$Username | cut -d":" -f7`
UserGroups=`groups $Username | awk -F": " '{print $2}'`
PasswordExpiryDate=`chage -l $Username | grep "Password expires" | awk -F": " '{print $2}'`
LastPasswordChangeDate=`chage -l $Username | grep "Last password change" | awk -F": " '{print $2}'`
AccountExpiryDate=`chage -l $Username | grep "Account expires" | awk -F": " '{print $2}'`
HomeDirSize=`du -hs $UserHomeDir | awk '{print $1}'`
clear
echo
  echo " "
  echo " "
  echo " "
  echo "User $Username Account Information:"
  echo "---------------------------------------"
printf "%-25s : %5s [User Id - %s]\n" "Username                 " "$Username" "$Userid"
printf "%-25s : %5s\n"                "Password previous change " "$LastPasswordChangeDate"
printf "%-25s : %5s\n"                "Account Date Expired     " "$AccountExpiryDate"
  echo "--------------------------------------"
  echo " "

echo;;
		12) # ==================================================================================================================
	
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

if [ -f /etc/debian_version ]; then
	UIDN=1000
elif [ -f /etc/redhat-release ]; then
	UIDN=500
else
	UIDN=500
fi

echo " "
echo " "
echo "===========================================";
echo " "
echo "-----------------------------------"
echo "        USER ACCOUNTS LIST         "
echo "-----------------------------------"
echo "[USERNAME]   -   [DATE EXPIRED]  "
echo " "
while read ceklist
do
        AKUN="$(echo $ceklist | cut -d: -f1)"
        ID="$(echo $ceklist | grep -v nobody | cut -d: -f3)"
        exp="$(chage -l $AKUN | grep "Account expires" | awk -F": " '{print $2}')"
        if [[ $ID -ge $UIDN ]]; then
        printf "%-17s %2s\n" "$AKUN" "$exp"
        fi
done < /etc/passwd
JUMLAH="$(awk -F: '$3 >= '$UIDN' && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
echo "-------------------------------------"
echo "Number Of User Accounts: $JUMLAH USERS"
echo "-------------------------------------"
echo " "
echo "===========================================";
echo " ";
echo " ";
;;
		13) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
echo " "
echo " "
echo "===========================================";
echo " "
echo " "

if [ -e "/var/log/auth.log" ]; then
        LOG="/var/log/auth.log";
fi
if [ -e "/var/log/secure" ]; then
        LOG="/var/log/secure";
fi
		
data=( `ps aux | grep -i dropbear | awk '{print $2}'`);
echo "-----=[ Dropbear User Login ]=-----";
echo "ID - Username - IP";
echo "-------------------------------------";
cat $LOG | grep -i dropbear | grep -i "Password auth succeeded" > /tmp/login-db.txt;
for PID in "${data[@]}"
do
        cat /tmp/login-db.txt | grep "dropbear\[$PID\]" > /tmp/login-db-pid.txt;
        NUM=`cat /tmp/login-db-pid.txt | wc -l`;
        USER=`cat /tmp/login-db-pid.txt | awk '{print $10}'`;
        IP=`cat /tmp/login-db-pid.txt | awk '{print $12}'`;
        if [ $NUM -eq 1 ]; then
                echo "$PID - $USER - $IP";
		fi
done
echo " "
echo "-----=[ OpenSSH User Login ]=-----";
echo "ID - Username - IP";
echo "-------------------------------------";
cat $LOG | grep -i sshd | grep -i "Accepted password for" > /tmp/login-db.txt
data=( `ps aux | grep "\[priv\]" | sort -k 72 | awk '{print $2}'`);

for PID in "${data[@]}"
do
        cat /tmp/login-db.txt | grep "sshd\[$PID\]" > /tmp/login-db-pid.txt;
        NUM=`cat /tmp/login-db-pid.txt | wc -l`;
        USER=`cat /tmp/login-db-pid.txt | awk '{print $9}'`;
        IP=`cat /tmp/login-db-pid.txt | awk '{print $11}'`;
        if [ $NUM -eq 1 ]; then
                echo "$PID - $USER - $IP";
        fi
done
if [ -f "/etc/openvpn/server-vpn.log" ]; then
	line=`cat /etc/openvpn/server-vpn.log | wc -l`
	a=$((3+((line-8)/2)))
	b=$(((line-8)/2))
	echo " "
	echo "-----=[ OpenVPN User Login ]=-----";
	echo "Username - IP - Connected Since";
	echo "-------------------------------------";
	cat /etc/openvpn/server-vpn.log | head -n $a | tail -n $b | cut -d "," -f 1,2,5 | sed -e 's/,/   /g' > /tmp/vpn-login-db.txt
	cat /tmp/vpn-login-db.txt
fi

echo " "
echo " "
echo "===========================================";
echo " ";
echo " ";

	;;
		14) # ==================================================================================================================
	
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

if [ -e "/var/log/auth.log" ]; then
        LOG="/var/log/auth.log";
fi
if [ -e "/var/log/secure" ]; then
        LOG="/var/log/secure";
fi

case $1 in
dropbear)
ps ax|grep dropbear > /tmp/pid.txt
cat $LOG |  grep -i "Password auth succeeded" > /tmp/sukses.txt
perl -pi -e 's/Password auth succeeded for//g' /tmp/sukses.txt
perl -pi -e 's/dropbear/PID/g' /tmp/sukses.txt
;;
openssh)
clear
ps ax|grep sshd > /tmp/pid.txt
cat /var/log/auth.log | grep -i ssh | grep -i "Accepted password for" > /tmp/sukses.txt
perl -pi -e 's/Accepted password for//g' /tmp/sukses.txt
perl -pi -e 's/sshd/PID/g' /tmp/sukses.txt
;;
*)
echo -e "Use the ${red}user-log dropbear${NC} to check Dropbear log"
echo -e "Use the ${red}user-log openssh${NC} to check Openssh log"
echo " "
echo "==========================================="
echo " "
echo " "
exit 1
;;
esac
echo "            User Log Details" > /tmp/hasil.txt
echo "Date - Hour - Hostname - Process ID - Username - IP address" >> /tmp/hasil.txt
echo "===========================================" >> /tmp/hasil.txt
cat /tmp/pid.txt | while read line;do
set -- $line
cat /tmp/sukses.txt | grep $1 >> /tmp/hasil.txt
done
echo "===========================================" >> /tmp/hasil.txt
echo " " >> /tmp/hasil.txt
echo " " >> /tmp/hasil.txt
cat /tmp/hasil.txt
;;
		15) # ==================================================================================================================
	
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
MAX=2
if [ -e "/var/log/auth.log" ]; then
        OS=1;
        LOG="/var/log/auth.log";
fi
if [ -e "/var/log/secure" ]; then
        OS=2;
        LOG="/var/log/secure";
fi
if [[ ${1+x} ]]; then
        MAX=$1;
fi
echo " "
echo " "
echo "-------------------------------------------"
echo "Users Who Login More Than The Limit Of [$MAX]"
echo "-------------------------------------------"
while :
do
        cat /etc/passwd | grep "/home/" | cut -d":" -f1 > /root/user.txt
        username1=( `cat "/root/user.txt" `);
        i="0";
        for user in "${username1[@]}"
			do
                username[$i]=`echo $user | sed 's/'\''//g'`;
                jumlah[$i]=0;
                i=$i+1;
			done
        cat $LOG | grep -i dropbear | grep -i "Password auth succeeded" > /tmp/log-db.txt
        proc=( `ps aux | grep -i dropbear | awk '{print $2}'`);
        for PID in "${proc[@]}"
			do
                cat /tmp/log-db.txt | grep "dropbear\[$PID\]" > /tmp/log-db-pid.txt
                NUM=`cat /tmp/log-db-pid.txt | wc -l`;
                USER=`cat /tmp/log-db-pid.txt | awk '{print $10}' | sed 's/'\''//g'`;
                IP=`cat /tmp/log-db-pid.txt | awk '{print $12}'`;
                if [ $NUM -eq 1 ]; then
                        i=0;
                        for user1 in "${username[@]}"
							do
                                if [ "$USER" == "$user1" ]; then
                                        jumlah[$i]=`expr ${jumlah[$i]} + 1`;
                                        pid[$i]="${pid[$i]} $PID"
                                fi
                                i=$i+1;
							done
                fi
			done
        cat $LOG | grep -i sshd | grep -i "Accepted password for" > /tmp/log-db.txt
        data=( `ps aux | grep "\[priv\]" | sort -k 72 | awk '{print $2}'`);
        for PID in "${data[@]}"
			do
                cat /tmp/log-db.txt | grep "sshd\[$PID\]" > /tmp/log-db-pid.txt;
                NUM=`cat /tmp/log-db-pid.txt | wc -l`;
                USER=`cat /tmp/log-db-pid.txt | awk '{print $9}'`;
                IP=`cat /tmp/log-db-pid.txt | awk '{print $11}'`;
                if [ $NUM -eq 1 ]; then
                        i=0;
                        for user1 in "${username[@]}"
							do
                                if [ "$USER" == "$user1" ]; then
                                        jumlah[$i]=`expr ${jumlah[$i]} + 1`;
                                        pid[$i]="${pid[$i]} $PID"
                                fi
                                i=$i+1;
							done
                fi
        done
        j="0";
        for i in ${!username[*]}
			do
                if [ ${jumlah[$i]} -gt $MAX ]; then
                        date=`date +"%Y-%m-%d %X"`;
                        echo "VPS-Murah.net - $date - ${username[$i]} - ${jumlah[$i]}";
                        echo "VPS-Murah.net - $date - ${username[$i]} - ${jumlah[$i]}" >> /root/log-limit.txt;
                        kill ${pid[$i]};
                        pid[$i]="";
                        j=`expr $j + 1`;
                fi
			done
        if [ $j -gt 0 ]; then
                if [ $OS -eq 1 ]; then
                        service ssh restart > /dev/null 2>&1;
                fi
                if [ $OS -eq 2 ]; then
                        service sshd restart > /dev/null 2>&1;
                fi
                service dropbear restart > /dev/null 2>&1;
                j=0;
		fi
sleep 300;
done
;;
		16) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

if [[ $USER != "root" ]]; then
	echo "Oops! root privileges needed"
	exit
fi

# go to root
cd

#Cek Curl
if [ ! -e /usr/bin/curl ]; then
	if [[ "$OS" = 'debian' ]]; then
	apt-get -y update && apt-get -y install curl
	else
	yum -y update && yum -y install curl
	fi
fi

# check registered ip
red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 0.6
clear
fi

if [[ -e /etc/debian_version ]]; then
	OS=debian
	RCLOCAL='/etc/rc.local'
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
	RCLOCAL='/etc/rc.d/rc.local'
	chmod +x /etc/rc.d/rc.local
else
	echo "This script only works on Debian and CentOS system."
	exit
fi

x=$1

case $x in
0)
	#dropbear
	rm -f /root/dropbearport
	dropbearport="$(netstat -nlpt | grep -i dropbear | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo "Dropbear Port:"

	cat > /root/dropbearport <<-END
	$dropbearport
	END

	exec</root/dropbearport
	while read line
	do
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		echo "$line ==> Limit $x login"
		#grep "iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL > /dev/null
		#if [[ $? != 0 ]];then
			#sed -i "1 a\iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL
		#fi
		#sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/g" -i $RCLOCAL
	done
	
	echo ""
	rm -f /root/dropbearport
	
	#openssh
	rm -f /root/opensshport
	opensshport="$(netstat -nlpt | grep -i sshd | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo "OpenSSH Port:"
	
	cat > /root/opensshport <<-END
	$opensshport
	END
	
	exec</root/opensshport
	while read line
	do
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		echo "$line ==> Limit $x login"
		#grep "iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL > /dev/null
		#if [[ $? != 0 ]];then
			#sed -i "1 a\iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL
		#fi
		#sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/g" -i $RCLOCAL
	done
	
	echo ""
	rm -f /root/opensshport
	
	sed '/^$/d' $RCLOCAL > /tmp/rc.local
	cat /tmp/rc.local > $RCLOCAL
	$RCLOCAL start
;;
2)
	#dropbear
	rm -f /root/dropbearport
	dropbearport="$(netstat -nlpt | grep -i dropbear | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo "Dropbear Port:"

	cat > /root/dropbearport <<-END
	$dropbearport
	END

	exec</root/dropbearport
	while read line
	do
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		echo "$line ==> Limit $x login"
		grep "iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL > /dev/null
		if [[ $? != 0 ]];then
			sed -i "1 a\iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL
		fi
		#sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/g" -i $RCLOCAL
	done
	
	echo ""
	rm -f /root/dropbearport
	
	#openssh
	rm -f /root/opensshport
	opensshport="$(netstat -nlpt | grep -i sshd | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo "OpenSSH Port:"
	
	cat > /root/opensshport <<-END
	$opensshport
	END
	
	exec</root/opensshport
	while read line
	do
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		echo "$line ==> Limit $x login"
		grep "iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL > /dev/null
		if [[ $? != 0 ]];then
			sed -i "1 a\iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL
		fi
		#sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/g" -i $RCLOCAL
	done
	
	echo ""
	rm -f /root/opensshport
	
	sed '/^$/d' $RCLOCAL > /tmp/rc.local
	cat /tmp/rc.local > $RCLOCAL
	$RCLOCAL start
;;
3)
	#dropbear
	rm -f /root/dropbearport
	dropbearport="$(netstat -nlpt | grep -i dropbear | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo "Dropbear Port:"

	cat > /root/dropbearport <<-END
	$dropbearport
	END

	exec</root/dropbearport
	while read line
	do
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		echo "$line ==> Limit $x login"
		grep "iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL > /dev/null
		if [[ $? != 0 ]];then
			sed -i "1 a\iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL
		fi
		#sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/g" -i $RCLOCAL
	done
	
	echo ""
	rm -f /root/dropbearport
	
	#openssh
	rm -f /root/opensshport
	opensshport="$(netstat -nlpt | grep -i sshd | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo "OpenSSH Port:"
	
	cat > /root/opensshport <<-END
	$opensshport
	END
	
	exec</root/opensshport
	while read line
	do
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 2 -j REJECT//g" -i $RCLOCAL
		sed "s/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above 3 -j REJECT//g" -i $RCLOCAL
		echo "$line ==> Limit $x login"
		grep "iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL > /dev/null
		if [[ $? != 0 ]];then
			sed -i "1 a\iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT" $RCLOCAL
		fi
		#sed "s/#iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/iptables -A INPUT -p tcp --syn --dport $line -m connlimit --connlimit-above $x -j REJECT/g" -i $RCLOCAL
	done
	
	echo ""
	rm -f /root/opensshport
	
	sed '/^$/d' $RCLOCAL > /tmp/rc.local
	cat /tmp/rc.local > $RCLOCAL
	$RCLOCAL start
;;
*)
	echo ""
	echo "Type autokill 2, limit 2 login only"
	echo "Type autokill 3, maximum 3 login"
	echo "Type autokill 0, for no limit login"
	echo ""
;;
esac

cd ~/
rm -f /root/IP
	;;
		17) # ==================================================================================================================
	;;
		18) # ==================================================================================================================
	;;
		19) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
if [ ! -f /usr/local/bin/deleteduser ]; then
    echo "echo "Script Created By VPS-Murah.net"" > /usr/local/bin/deleteduser
	chmod +x /usr/local/bin/deleteduser
fi
hariini=`date +%d-%m-%Y`
echo " "
echo " "
echo "-------------------------------------------"
cat /etc/shadow | cut -d: -f1,8 | sed /:$/d > /tmp/expirelist.txt
totalaccounts=`cat /tmp/expirelist.txt | wc -l`
for((i=1; i<=$totalaccounts; i++ ))
       do
       tuserval=`head -n $i /tmp/expirelist.txt | tail -n 1`
       username=`echo $tuserval | cut -f1 -d:`
       userexp=`echo $tuserval | cut -f2 -d:`
       userexpireinseconds=$(( $userexp * 86400 ))
       tglexp=`date -d @$userexpireinseconds`             
       tgl=`echo $tglexp |awk -F" " '{print $3}'`
       while [ ${#tgl} -lt 2 ]
       do
           tgl="0"$tgl
       done
       while [ ${#username} -lt 15 ]
       do
           username=$username" " 
       done
       bulantahun=`echo $tglexp |awk -F" " '{print $2,$6}'`
       echo "echo "VPS-Murah.net- User : $username Date Expired On : $tgl $bulantahun"" >> /usr/local/bin/alluser
       todaystime=`date +%s`
       if [ $userexpireinseconds -ge $todaystime ] ;
           then
			:
       else
       echo "echo "Username : $username already expired On Date: $tgl $bulantahun has been deleted on:: $hariini "" >> /usr/local/bin/deleteduser
	   echo "Username $username expired on $tgl $bulantahun successfully removed from the system on $hariini"
       userdel $username
       fi
done
echo "-------------------------------------------"
echo " The script has been successfully executed "
echo "-------------------------------------------"
echo " "
	;;
		20) # ==================================================================================================================
	#!/bin/bash
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
echo "echo "Script Created By VPS-Murah.net"" > /usr/local/bin/infouser
echo "echo "Script Created By VPS-Murah.net"" > /usr/local/bin/expireduser
echo "echo "Script Created By VPS-Murah.net"" > /usr/local/bin/alluser
chmod +x /usr/local/bin/infouser
chmod +x /usr/local/bin/expireduser
chmod +x /usr/local/bin/alluser

cat /etc/shadow | cut -d: -f1,8 | sed /:$/d > /tmp/expirelist.txt
totalaccounts=`cat /tmp/expirelist.txt | wc -l`
for((i=1; i<=$totalaccounts; i++ ))
       do
       tuserval=`head -n $i /tmp/expirelist.txt | tail -n 1`
       username=`echo $tuserval | cut -f1 -d:`
       userexp=`echo $tuserval | cut -f2 -d:`
       userexpireinseconds=$(( $userexp * 86400 ))
       tglexp=`date -d @$userexpireinseconds`             
       tgl=`echo $tglexp |awk -F" " '{print $3}'`
       while [ ${#tgl} -lt 2 ]
       do
           tgl="0"$tgl
       done
       while [ ${#username} -lt 15 ]
       do
           username=$username" " 
       done
       bulantahun=`echo $tglexp |awk -F" " '{print $2,$6}'`
       echo "echo "User : $username expired on : $tgl $bulantahun"" >> /usr/local/bin/alluser
       todaystime=`date +%s`
       if [ $userexpireinseconds -ge $todaystime ] ;
           then
           timeto7days=$(( $todaystime + 604800 ))
                if [ $userexpireinseconds -le $timeto7days ];
                then                     
                     echo "echo "User : $username expired on date : $tgl $bulantahun"" >> /usr/local/bin/infouser
                fi
       else
       echo "echo "User : $username expired on : $tgl $bulantahun"" >> /usr/local/bin/expireduser
       passwd -l $username
       fi
done
	;;
		21) # ==================================================================================================================
	
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

echo " "
echo " "
echo "===========================================";
echo " ";
if [ -e "/root/log-limit.txt" ]; then
echo "User Who Violate The Maximum Limit";
echo "Time - Username - Number of Multilogin"
echo "-------------------------------------";
cat /root/log-limit.txt
else
echo " No user has committed a violation"
echo " "
echo " or"
echo " "
echo " The user-limit script not been executed."
fi
echo " ";
echo "===========================================";
echo " ";
echo " ";
;;
		22) # ==================================================================================================================
	
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

echo " "
echo " "
echo "===========================================";
echo " ";
if [ -e "/root/log-ban.txt" ]; then
echo "         BANNED USER ACCOUNTS        ";
echo "Time - Username - Number of Multilogin"
echo "-------------------------------------";
cat /root/log-ban.txt
else
echo " No user has committed a violation"
echo " "
echo " or"
echo " "
echo " The user-ban script has not yet started"
fi
echo " ";
echo "===========================================";
echo " ";
echo " "
;;
		23) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
if [ -e "/var/lib/premium-script" ]; then
		echo "continue..."
		clear
	else
		mkdir /var/lib/premium-script;
fi
read -p "        Username      : " username
grep -E "^$username" /etc/ppp/chap-secrets >/dev/null
if [ $? -eq 0 ]; then
echo "Username already exists in your VPS"
exit 0
else
read -p "        Password      : " password
read -p "        How many days?: " masa_aktif

today=`date +%s`
masa_aktif_detik=$(( $masa_aktif * 86400 ))
saat_expired=$(($today + $masa_aktif_detik))
tanggal_expired=$(date -u --date="1970-01-01 $saat_expired sec GMT" +%Y/%m/%d)
tanggal_expired_display=$(date -u --date="1970-01-01 $saat_expired sec GMT" '+%d %B %Y')
clear
echo "Connecting to Server..."
sleep 0.5
echo "Creating Account..."
sleep 0.5
echo "Generating Host..."
sleep 0.5
echo "Creating New PPTP Username: $username"
sleep 0.5
echo "Creating Password: $password"
sleep 0.5
MYIP=$(wget -qO- ipv4.icanhazip.com)
echo "$username	*	$password	*" >> /etc/ppp/chap-secrets
echo "$username *   $password   *  $saat_expired"  >> /var/lib/premium-script/data-user-pptp
  clear
  echo ""
  echo ""
  echo ""
  echo "--------------------------------------"
  echo "          PPTP Account Details        "
  echo "--------------------------------------"
  echo "   Host          : $MYIP"
  echo "   Username      : $username"
  echo "   Password      : $password"
  echo "   Date Expired  : $tanggal_expired_display"
  echo "--------------------------------------"
  echo " "
  echo " "
fi
	;;
		24) # ==================================================================================================================
#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
blue='\e[1;34m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

read -p "Input Username you want to delete: " username
grep -E "^$username" /etc/ppp/chap-secrets >/dev/null
if [ $? -eq 0 ]; then
# changing the password
username2="/$username/d";
sed -i $username2 /etc/ppp/chap-secrets
sed -i $username2 /var/lib/premium-script/data-user-pptp
sed -i '/^$/d' /etc/ppp/chap-secrets
sed -i '/^$/d' /var/lib/premium-script/data-user-pptp
clear
  echo " "
  echo " "
  echo " "
  echo "-----------------------------------------------"
  echo -e "Username ${blue}$username${NC} successfully ${red}REMOVED${NC}."
  echo -e "Login access for Username ${blue}$username${NC} has been deleted"
  echo "-----------------------------------------------"
else
echo "Username not found on your server"
    exit 1
fi	
	;;
		25) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

chmod +x /var/lib/premium-script/data-user-pptp


read -p "Insert Username : " username
grep -E "^$username" /var/lib/premium-script/data-user-pptp >/dev/null
if [ $? -eq 0 ]; then
userpass=`cat /var/lib/premium-script/data-user-pptp | grep "^$username" | awk '{print $3}'`
saat_expired=`cat /var/lib/premium-script/data-user-pptp | grep "^$username" | awk '{print $5}'`
tanggal_expired=$(date -u --date="1970-01-01 $saat_expired sec GMT" +%Y/%m/%d)
tanggal_expired_display=$(date -u --date="1970-01-01 $saat_expired sec GMT" '+%d %B %Y')
clear
  echo " "
  echo " "
  echo "-----------------------------------------"
  echo " Account Details For Username $Username  "
  echo "-----------------------------------------"
  echo "   Username        : $username"
  echo "   Password        : $userpass"
  echo "   Date Expired    : $tanggal_expired_display"
  echo "-----------------------------------------"
else
echo "Username not found on your server"
    exit 1
fi
	;;
		26) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.5
echo "Checking Permision..."
sleep 0.4
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi
last | grep ppp | grep still | awk '{print " ",$1," - " $3 }' > /tmp/login-db-pptp.txt;
echo " "
echo " "
echo "===========================================";
echo " "
echo " "
echo "-------------------------------------";
echo "    PPTP VPN User Login";
echo "-------------------------------------";
echo "Username   ---   IP";
echo "-------------------------------------";
cat /tmp/login-db-pptp.txt
echo " "
echo " "
echo " "
echo "===========================================";
echo " ";
echo " ";
	;;
		27) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

totalaccounts=`cat /var/lib/premium-script/data-user-pptp | wc -l`
echo " " > /tmp/alluser-pptp-data
for((i=1; i<=$totalaccounts; i++ ))
       do  
username=`cat /var/lib/premium-script/data-user-pptp | awk '{print $1}' | head -n $i | tail -n 1`
userpass=`cat /var/lib/premium-script/data-user-pptp | awk '{print $3}' | head -n $i | tail -n 1`
saat_expired=`cat /var/lib/premium-script/data-user-pptp | awk '{print $5}' | head -n $i | tail -n 1`
tanggal_expired=$(date -u --date="1970-01-01 $saat_expired sec GMT" +%Y/%m/%d)
tanggal_expired_display=$(date -u --date="1970-01-01 $saat_expired sec GMT" '+%d %B %Y')
echo "PPTP VPN User: $username [$userpass] Expired On: $tanggal_expired_display" >> /tmp/alluser-pptp-data
done
clear
  echo " "
  echo " "
  echo " "
  echo "-----------------------------------------------"
  echo "             VPN PPTP Accounts                 "
  echo "-----------------------------------------------"
cat /tmp/alluser-pptp-data
  echo "-----------------------------------------------"
  echo " "
  echo " "
	;;
		28) # ==================================================================================================================
	;;
		29) # ==================================================================================================================
	#!/bin/bash
wget freevps.us/downloads/bench.sh -O - -o /dev/null|bash

	;;
		30) # ==================================================================================================================
	;;
		31) # ==================================================================================================================
	service stunnel4 restart
	;;
		32) # ==================================================================================================================
		if [[ "$OS" = 'debian' ]]; then 
		service ssh restart 
	else 
		service sshd restart 
	fi
	;;
		33) # ==================================================================================================================
	service dropbear restart
	;;
		34) # ==================================================================================================================
	service openvpn restart
	;;
		35) # ==================================================================================================================
		if [[ "$OS" = 'debian' ]]; then 
		service pptpd restart 
	else 
		service pptpd restart 
	fi
	;;
     	36) # ==================================================================================================================
	service webmin restart
	;;
     	37) # ==================================================================================================================
	if [[ "$OS" = 'debian' ]]; then 
		service squid3 restart 
	else 
		service squid restart 
	fi
	;;
		38) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

if [[ $USER != 'root' ]]; then
	echo "Oops! root privileges needed"
	exit
fi
while :
do
	clear
	echo " "
	echo " "
	echo "-----------------------------------------"
	echo "            Edit Port Options            "
	echo "-----------------------------------------"
	echo -e "\e[031;1m 1\e[0m) Edit Port OpenSSH (\e[34;1medit-port-openssh\e[0m)"
	echo -e "\e[031;1m 2\e[0m) Edit Port Dropbear (\e[34;1medit-port-dropbear\e[0m)"
	echo -e "\e[031;1m 3\e[0m) Edit Port Squid Proxy (\e[34;1medit-port-squid\e[0m)"
	echo -e "\e[031;1m 4\e[0m) Edit Port OpenVPN (\e[34;1medit-port-openvpn\e[0m)"
	echo ""
	echo -e "\e[031;1m x\e[0m) Exit"
	echo ""
	read -p "Select options from (1-4 or x): " option2
	case $option2 in
		1)
		clear
		edit-port-openssh
		exit
		;;
		2)
		clear
		edit-port-dropbear
		exit
		;;
		3)
		clear
		edit-port-squid
		exit
		;;
		4)
		clear
		edit-port-openvpn
		exit
		;;
		x)
		clear
		exit
		;;
	esac
done
cd

	;;
		39) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456
red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 1
clear
fi

if [ ! -e /usr/local/bin/reboot_otomatis ]; then
echo '#!/bin/bash' > /usr/local/bin/reboot_otomatis 
echo 'tanggal=$(date +"%m-%d-%Y")' >> /usr/local/bin/reboot_otomatis 
echo 'waktu=$(date +"%T")' >> /usr/local/bin/reboot_otomatis 
echo 'echo "Server successfully rebooted on the date of $tanggal hit $waktu." >> /root/log-reboot.txt' >> /usr/local/bin/reboot_otomatis 
echo '/sbin/shutdown -r now' >> /usr/local/bin/reboot_otomatis 
chmod +x /usr/local/bin/reboot_otomatis
fi

echo "-------------------------------------------"
echo "          System Auto Reboot Menu          "
echo "-------------------------------------------"
echo "1.  Set Auto-Reboot Every 1 Hour"
echo "2.  Set Auto-Reboot Every 6 Hours"
echo "3.  Set Auto-Reboot Every 12 Hours"
echo "4.  Set Auto-Reboot Once a Day"
echo "5.  Set Auto-Reboot Once a Week"
echo "6.  Set Auto-Reboot Once a Month"
echo "7.  Turn off Auto-Reboot"
echo "8.  View reboot log"
echo "9.  Remove reboot log"
echo "-------------------------------------------"
read -p "Select options from (1-9): " x

if test $x -eq 1; then
echo "10 * * * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
echo "Auto-Reboot has been set every an hour."
elif test $x -eq 2; then
echo "10 */6 * * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
echo "Auto-Reboot has been successfully set every 6 hours."
elif test $x -eq 3; then
echo "10 */12 * * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
echo "Auto-Reboot has been successfully set every 12 hours."
elif test $x -eq 4; then
echo "10 0 * * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
echo "Auto-Reboot has been successfully set once a day."
elif test $x -eq 5; then
echo "10 0 */7 * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
echo "Auto-Reboot has been successfully set once a week."
elif test $x -eq 6; then
echo "10 0 1 * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
echo "Auto-Reboot has been successfully set once a month."
elif test $x -eq 7; then
rm -f /etc/cron.d/reboot_otomatis
echo "Auto-Reboot successfully TURNED OFF."
elif test $x -eq 8; then
if [ ! -e /root/log-reboot.txt ]; then
	echo "No reboot activity found"
	else 
	echo 'LOG REBOOT'
	echo "-------"
	cat /root/log-reboot.txt
fi
elif test $x -eq 9; then
echo "" > /root/log-reboot.txt
echo "Auto Reboot Log successfully deleted!"
else
echo "Options Not Found In Menu"
exit
fi
	;;
		40) # ==================================================================================================================
	reboot
	;;
		41) # ==================================================================================================================
	;;
		42) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

MYIP=$(wget -qO- ipv4.icanhazip.com)
if [ $MYIP = "" ]; then
   MYIP=`ifconfig | grep 'inet addr:' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d: -f2 | awk '{ print $1}' | head -1`;
fi
echo " "
echo "==========================================="
echo "DEFAULT INSTALLATION DETAILS"
echo "==========================================="
echo "" 
echo "-------"
echo "SERVICE" 
echo "-------"  
echo "OpenVPN  : TCP 1194 (client config : http://$MYIP/openvpn.tar.gz)"  
echo "OpenSSH  : 22, 80, 443"  
echo "Stunnel4 : 443"
echo "Dropbear : 109, 110, 442"  
echo "Squid3   : 80, 8000, 8080, 8888, 3128 (limit to IP SSH)"  
echo "PPTP VPN : 1723" 
echo "badvpn   : badvpn-udpgw port 7300"  
echo "nginx    : 80"  
echo ""  
echo "-----"
echo "TOOLS"  
echo "-----" 
echo "axel"  
echo "bmon"  
echo "htop"  
echo "iftop"  
echo "mtr"  
echo "" 
echo "------"
echo "SCRIPT"  
echo "------" 
echo "√ Premium Script installed on your server!" 
echo "~ Type premium-script to display the menu"
echo ""  
echo "--------------"
echo "OTHER FEATURES" 
echo "--------------"  
echo "Webmin   : http://$MYIP:10000/"  
echo "vnstat   : http://$MYIP/vnstat/"  
echo "MRTG     : http://$MYIP/mrtg/"  
echo "Timezone : Asia/Bangkok (GMT +7)"  
echo "Fail2Ban : [ON]"  
echo "DDflate  : [ON]"
echo "IPv6     : [OFF]"  
echo "" 
echo "=================================================="
echo "------ Created by https://www.zenon-vpn.net ------"
echo "----- Modified by FB : Ekkachai Chompoowiset -----"
echo " "
	;;
		43) # ==================================================================================================================
	#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

if [[ -e /etc/debian_version ]]; then
	OS=Debian
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=Centos
else
	echo "This script only works on Debian and CentOS system"
	exit
fi
if $(uname -m | grep '64'); then
  arch='64 bit'
else
  arch='32 bit'
fi
echo "SOLUTIONS" > /var/tmp/solutions.txt

# tun/tap
# if [[ ! -e /dev/net/tun ]]; then
	# echo "TUN/TAP: Not Running" > /var/tmp/hasil-tuntap.txt
	# echo "- Enable Tun/TAP on the VPS Panel. If it is enabled, press disable wait 5 minutes and press enable again" >> /var/tmp/solutions.txt
	# else
	# echo "TUN/TAP: Normal" > /var/tmp/hasil-tuntap.txt
# fi

# ppp
# if [[ ! -e /dev/ppp ]]; then
	# echo "PPP: Not Running" > /var/tmp/hasil-ppp.txt
	# echo "- Enable PPP on the VPS Panel. If it is enabled, press disable wait 5 minutes and press enable again" >> /var/tmp/solutions.txt
	# else
	# echo "PPP: Normal" > /var/tmp/hasil-ppp.txt
# fi

#OpenSSH
netstat -ntlp | grep ssh | awk '{print $4}' | cut -d ":" -f 2 > /var/tmp/openssh.txt
if [[ -s /var/tmp/openssh.txt ]] ; then
cat /var/tmp/openssh.txt  | xargs | sed -e 's/ /,/g' > /var/tmp/openssh2.txt
portopenssh=`cat /var/tmp/openssh2.txt`
echo "OpenSSH: Normal. Running at Port $portopenssh" > /var/tmp/hasil-openssh.txt
else
echo "OpenSSH: Not Normal. (Not Running)" > /var/tmp/hasil-openssh.txt
if [[ -e /etc/debian_version ]]; then
		echo "- Type service ssh restart on putty/juicessh" >> /var/tmp/solutions.txt
else [[ -e /etc/centos-release || -e /etc/redhat-release ]];
		echo "- Type service sshd restart on putty/juicessh" >> /var/tmp/solutions.txt
fi
fi

#Dropbear
netstat -ntlp | grep dropbear | awk '{print $4}' | cut -d ":" -f 2 > /var/tmp/dropbear.txt
if [[ -s /var/tmp/dropbear.txt ]] ; then
cat /var/tmp/dropbear.txt | xargs | sed -e 's/ /,/g' > /var/tmp/dropbear2.txt
portdropbear=`cat /var/tmp/dropbear2.txt`
echo "Dropbear: Normal. Running at Port $portdropbear" > /var/tmp/hasil-dropbear.txt
else
echo "Dropbear: Not Normal. (Not Running)" > /var/tmp/hasil-dropbear.txt
echo "- Type service dropbear restart on putty/juicessh" >> /var/tmp/solutions.txt
fi

#Squid Proxy
netstat -ntlp | grep squid | awk '{print $4}' | cut -d ":" -f 4 > /var/tmp/squid.txt
if [[ -s /var/tmp/squid.txt ]] ; then
cat /var/tmp/squid.txt | xargs | sed -e 's/ /,/g' > /var/tmp/squid2.txt
portsquid=`cat /var/tmp/squid2.txt`
echo "Squid: Normal. Running at Port $portsquid" > /var/tmp/hasil-squid.txt
else
echo "Squid: Not Normal. (Not Running)" > /var/tmp/hasil-squid.txt
if [[ -e /etc/debian_version ]]; then
		echo "- Type service squid3 restart on putty/juicessh" >> /var/tmp/solutions.txt
else [[ -e /etc/centos-release || -e /etc/redhat-release ]];
		echo "- Type service squid restart on putty/juicessh" >> /var/tmp/solutions.txt
fi
fi

#OpenVPN
netstat -ntlp | grep openvpn | awk '{print $4}' | cut -d ":" -f 2 > /var/tmp/openvpn.txt
if [[ -s /var/tmp/openvpn.txt ]] ; then
cat /var/tmp/openvpn.txt | xargs | sed -e 's/ /,/g' > /var/tmp/openvpn2.txt
portopenvpn=`cat /var/tmp/openvpn2.txt`
echo "OpenVPN: Normal. Running at Port $portopenvpn" > /var/tmp/hasil-openvpn.txt
else
echo "OpenVPN: Not Normal. (Not Running)" > /var/tmp/hasil-openvpn.txt
echo "- Type service openvpn restart on putty/juicessh" >> /var/tmp/solutions.txt
echo "(If says no such device when openvpn is restarted, please disable Tun / Tap then enable again." >> /var/tmp/solutions.txt
fi

#Webmin
netstat -ntlp | grep 10000 | awk '{print $4}' | cut -d ":" -f 2 > /var/tmp/webmin.txt
if [[ -s /var/tmp/webmin.txt ]] ; then
cat /var/tmp/webmin.txt | xargs | sed -e 's/ /,/g' > /var/tmp/webmin2.txt
portwebmin=`cat /var/tmp/webmin2.txt`
echo "Webmin: Normal. Running at Port $portwebmin" > /var/tmp/hasil-webmin.txt
else
echo "Webmin: Not Normal. (Not Running)" > /var/tmp/hasil-webmin.txt
echo "- Type service webmin restart on putty/juicessh" >> /var/tmp/solutions.txt
fi

#nginx 
netstat -ntlp | grep nginx | awk '{print $4}' | cut -d ":" -f 2 > /var/tmp/nginx.txt
if [[ -s /var/tmp/nginx.txt ]] ; then
cat /var/tmp/nginx.txt | xargs | sed -e 's/ /,/g' > /var/tmp/nginx2.txt
portnginx=`cat /var/tmp/nginx2.txt`
echo "nginx: Normal. Running at Port $portnginx" > /var/tmp/hasil-nginx.txt
else
echo "nginx: Not Normal. (Not Running)" > /var/tmp/hasil-nginx.txt
echo "- Type service nginx restart on putty/juicessh" >> /var/tmp/solutions.txt
fi

echo " "
echo " "
echo " "
echo "-------------------------------------------"
echo "Automatic VPS Diagnostics"
echo "-------------------------------------------"
echo "CHECKING INTERFACE"
echo " "
echo "Operating System : $OS"
echo "Architechture    : $arch"
echo "-------------------------------------------"
echo "CHECKING APPLICATIONS"
echo " "
cat /var/tmp/hasil-openssh.txt
cat /var/tmp/hasil-dropbear.txt
cat /var/tmp/hasil-squid.txt
cat /var/tmp/hasil-openvpn.txt
cat /var/tmp/hasil-webmin.txt
cat /var/tmp/hasil-nginx.txt
echo "-------------------------------------------"
cat /var/tmp/solutions.txt
echo "-------------------------------------------"
echo "Do you want to run auto-fix?"
echo "1) YES"
echo "2) NO"
read -p "Select options (1-2): " x
if test $x -eq 1; then
if [[ -e /etc/debian_version ]]; then
service nginx start
service php5-fpm start
service vnstat restart
service openvpn restart
service snmpd restart
service ssh restart
service dropbear restart
service fail2ban restart
service squid3 restart
service webmin restart
service pptpd restart
clear
else [[ -e /etc/centos-release || -e /etc/redhat-release ]];
service nginx start
service php-fpm start
service vnstat restart
service openvpn restart
service snmpd restart
service sshd restart
service dropbear restart
service fail2ban restart
service squid restart
service webmin restart
service pptpd restart
service crond start
clear
fi
echo " "
echo "-------------------------------------------"
echo " Auto Fix Process Completed                "
echo "-------------------------------------------"
echo " "
# runs this if option 2 is selected
elif test $x -eq 2; then
exit
else
echo "Options are not available in the menu."
exit
fi

	;;
		44) # ==================================================================================================================
	echo " "
echo "Goodbye Menu!"
echo "Modified by Ekkachai Chompoowiset"
echo " "
exit
	;;
			45) # ==================================================================================================================
#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

#Check Curl
if [ ! -e /usr/bin/curl ]; then
	if [[ "$OS" = 'debian' ]]; then
	apt-get -y update && apt-get -y install curl
	else
	yum -y update && yum -y install curl
	fi
fi

# check registered ip
red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 0.6
clear
fi

#Check ROOT
if [[ $USER != "root" ]]; then
	echo "Oops! root privileges needed."
	exit
fi

#Check OS
if [[ -e /etc/debian_version ]]; then
	OS=debian
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
else
	echo "This script only works on Debian and CentOS system"
	exit
fi

#Remove Temporary Files
rm -f /root/dropbearport

if [[ "$OS" = 'debian' ]]; then
	read -p "Input a Dropbear Port separated by 'spaces': " port
	dropbearport="$(netstat -nlpt | grep -i dropbear | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo ""
	echo -e "\e[34;1mPort Dropbear before editing:\e[0m"

	cat > /root/dropbearport <<-END
	$dropbearport
	END

	exec</root/dropbearport
	while read line
	do
		echo "Port $line"
		#sed "s/Port $line//g" -i /etc/default/dropbear
	done
	rm -f /root/dropbearport

	sed '/DROPBEAR_PORT/d' -i /etc/default/dropbear
	sed '/DROPBEAR_EXTRA_ARGS/d' -i /etc/default/dropbear

	echo ""

	for i in ${port[@]}
	do
		netstat -nlpt | grep -w "$i" > /dev/null
		if [ $? -eq 0 ]; then
			netstat -nlpt | grep -i dropbear | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -n "-p $i " >> /root/dropbearport
				echo -e "\e[032;1mPort $i added successfully\e[0m"
			fi
			
			netstat -nlpt | grep -i sshd | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenSSH\e[0m"
			fi
			
			netstat -nlpt | grep -i squid | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Squid\e[0m"
			fi
			
			netstat -nlpt | grep -i openvpn | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenVPN\e[0m"
			fi
		else
			echo -n "-p $i " >> /root/dropbearport
			echo -e "\e[032;1mPort $i added successfully\e[0m"
		fi
	done

	DROPBEAR_PORT="$(cat /root/dropbearport | awk '{print $2}')"
	sed -i "5 a\DROPBEAR_PORT=$DROPBEAR_PORT" /etc/default/dropbear

	while read line
	do
		echo "Port $line"
	done < "/root/dropbearport"
	sed -i "8 a\DROPBEAR_EXTRA_ARGS=\"$line\"" /etc/default/dropbear

	echo ""
	service dropbear restart > /dev/null
	sleep 0.5
	dropbearport="$(netstat -nlpt | grep -i dropbear | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo ""
	echo -e "\e[34;1mPort Dropbear after editing:\e[0m"

	cat > /root/dropbearport <<-END
	$dropbearport
	END

	exec</root/dropbearport
	while read line
	do
		echo "Port $line"
	done
	rm -f /root/dropbearport
else
	read -p "Enter Dropbear Ports separated by 'spaces': " port
	dropbearport="$(netstat -nlpt | grep -i dropbear | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo ""
	echo -e "\e[34;1mPort Dropbear before editing:\e[0m"

	cat > /root/dropbearport <<-END
	$dropbearport
	END

	exec</root/dropbearport
	while read line
	do
		echo "Port $line"
		#sed "s/Port $line//g" -i -i /etc/sysconfig/dropbear
	done
	rm -f /root/dropbearport
	sed '/OPTIONS=/d' -i /etc/sysconfig/dropbear
	echo ""

	for i in ${port[@]}
	do
		netstat -nlpt | grep -w "$i" > /dev/null
		if [ $? -eq 0 ]; then
			netstat -nlpt | grep -i dropbear | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -n "-p $i " >> /root/dropbearport
				echo -e "\e[032;1mPort $i added successfully\e[0m"
			fi
			
			netstat -nlpt | grep -i sshd | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenSSH\e[0m"
			fi
			
			netstat -nlpt | grep -i squid | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Squid\e[0m"
			fi
			
			netstat -nlpt | grep -i openvpn | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenVPN\e[0m"
			fi
		else
			echo -n "-p $i " >> /root/dropbearport
			echo -e "\e[032;1mPort $i added successfully\e[0m"
		fi
	done

	DROPBEAR_PORT="$(cat /root/dropbearport)"
	echo "OPTIONS=\"$DROPBEAR_PORT\"" > /etc/sysconfig/dropbear
	echo ""
	service dropbear restart > /dev/null
	sleep 0.5
	dropbearport="$(netstat -nlpt | grep -i dropbear | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo ""
	echo -e "\e[34;1mPort Dropbear after editing:\e[0m"

	cat > /root/dropbearport <<-END
	$dropbearport
	END

	exec</root/dropbearport
	while read line
	do
		echo "Port $line"
	done
	rm -f /root/dropbearport
fi
cd
	;;
			46) # ==================================================================================================================
#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

#Check Curl
if [ ! -e /usr/bin/curl ]; then
	if [[ "$OS" = 'debian' ]]; then
	apt-get -y update && apt-get -y install curl
	else
	yum -y update && yum -y install curl
	fi
fi

# check registered ip
red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 0.6
clear
fi

#Check ROOT
if [[ $USER != "root" ]]; then
	echo "Oops! root privileges needed."
	exit
fi

#Check OS
if [[ -e /etc/debian_version ]]; then
	OS=debian
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
else
	echo "This script only works on Debian and CentOS system"
	exit
fi

#Remove Temporary Files
rm -f /tmp/opensshport


if [[ "$OS" = 'debian' ]]; then
	cd
	read -p "Input OpenSSH Ports separated by 'spaces': " port
	opensshport="$(netstat -ntlp | grep -i ssh | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"

	#Display & Delete Old OpenSSH Port
	echo ""
	echo -e "\e[34;1mPort OpenSSH before editing:\e[0m"
	cat > /root/opensshport <<-END
	$opensshport
	END

	exec</root/opensshport
	while read line
	do
		echo "Port $line"
		sed "/Port $line/d" -i /etc/ssh/sshd_config
	done
	rm -f /root/opensshport

	echo ""

	#Add New Port
	for i in ${port[@]}
	do
		netstat -nlpt | grep -w "$i" > /dev/null
		if [ $? -eq 0 ]; then
			netstat -nlpt | grep -i ssh | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				sed -i "4 a\Port $i" /etc/ssh/sshd_config
				echo -e "\e[032;1mPort $i added successfully\e[0m"
			fi
			netstat -nlpt | grep -i dropbear | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Dropbear\e[0m"
			fi
			
			netstat -nlpt | grep -i squid | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Squid\e[0m"
			fi
			
			netstat -nlpt | grep -i openvpn | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenVPN\e[0m"
			fi
		else
			sed -i "4 a\Port $i" /etc/ssh/sshd_config
			echo -e "\e[032;1mPort $i added successfully\e[0m"
		fi
	done

	echo ""
	service ssh restart > /dev/null
	sleep 0.5
	#Display New Port
	rm -f /root/opensshport
	opensshport="$(netstat -nlpt | grep -i sshd | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo ""
	echo -e "\e[34;1mPort OpenSSH after editing:\e[0m"
	cat > /root/opensshport <<-END
	$opensshport
	END
	exec</root/opensshport
	while read line
	do
		echo "Port $line"
	done
	rm -f /root/opensshport
else 
#######################################################################################################################################
#Jika Centos
	cd
	read -p "Input OpenSSH Ports separated by 'spaces': " port
	opensshport="$(netstat -ntlp | grep -i ssh | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"

	#Display & Delete Old OpenSSH Port
	echo ""
	echo -e "\e[34;1mPort OpenSSH before editing:\e[0m"
	cat > /root/opensshport <<-END
	$opensshport
	END

	exec</root/opensshport
	while read line
	do
		echo "Port $line"
		sed "/Port $line/d" -i /etc/ssh/sshd_config
	done
	rm -f /root/opensshport

	echo ""

	#Add New Port
	for i in ${port[@]}
	do
		netstat -nlpt | grep -w "$i" > /dev/null
		if [ $? -eq 0 ]; then
			netstat -nlpt | grep -i ssh | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				sed -i "12 a\Port $i" /etc/ssh/sshd_config
				echo -e "\e[032;1mPort $i added successfully\e[0m"
			fi
			netstat -nlpt | grep -i dropbear | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Dropbear\e[0m"
			fi
			
			netstat -nlpt | grep -i squid | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Squid\e[0m"
			fi
			
			netstat -nlpt | grep -i openvpn | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenVPN\e[0m"
			fi
		else
			sed -i "12 a\Port $i" /etc/ssh/sshd_config
			echo -e "\e[032;1mPort $i added successfully\e[0m"
		fi
	done

	echo ""
	service sshd restart > /dev/null
	sleep 0.5
	#Display New Port
	rm -f /root/opensshport
	opensshport="$(netstat -nlpt | grep -i sshd | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo ""
	echo -e "\e[34;1mPort OpenSSH after editing:\e[0m"
	cat > /root/opensshport <<-END
	$opensshport
	END
	exec</root/opensshport
	while read line
	do
		echo "Port $line"
	done
	rm -f /root/opensshport
fi
cd
	;;
			47) # ==================================================================================================================
#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

#Check Curl
if [ ! -e /usr/bin/curl ]; then
	if [[ "$OS" = 'debian' ]]; then
	apt-get -y update && apt-get -y install curl
	else
	yum -y update && yum -y install curl
	fi
fi

# check registered ip
red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 0.6
clear
fi

#Check ROOT
if [[ $USER != "root" ]]; then
	echo "Oops! root privileges needed."
	exit
fi

#Check OS
if [[ -e /etc/debian_version ]]; then
	OS=debian
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
else
	echo "This script only works on Debian and CentOS system"
	exit
fi

#Remove Temporary Files
rm -f /root/openvpnport

if [[ "$OS" = 'debian' ]]; then
	read -p "Input your desired OpenVPN Port: " port

	openvpnport="$(netstat -nlpt | grep -i openvpn | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo ""
	echo -e "\e[34;1mPort OpenVPN before editing:\e[0m"

	cat > /root/openvpnport <<-END
	$openvpnport
	END

	exec</root/openvpnport
	while read line
	do
		echo "Port $line"
		sed "/port $line/d" -i /etc/openvpn/server.conf
	done
	rm -f /root/openvpnport

	echo ""

	for i in ${port[@]}
	do
		netstat -nlpt | grep -w "$i" > /dev/null
		if [ $? -eq 0 ]; then
			netstat -nlpt | grep -i openvpn | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				sed -i "1 a\port $i" /etc/openvpn/server.conf
				echo -e "\e[032;1mPort $i added successfully\e[0m"
			fi
			
			netstat -nlpt | grep -i ssh | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenSSH\e[0m"
			fi
			
			netstat -nlpt | grep -i dropbear | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Dropbear\e[0m"
			fi
			
			netstat -nlpt | grep -i squid | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Squid\e[0m"
			fi
		else
			sed -i "1 a\port $i" /etc/openvpn/server.conf
			echo -e "\e[032;1mPort $i added successfully\e[0m"
		fi
	done

	echo ""
	service openvpn restart > /dev/null
	sleep 0.5
	rm -f /root/openvpnport
	openvpnport="$(netstat -nlpt | grep -i openvpn | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo ""
	echo -e "\e[34;1mPort OpenVPN after editing:\e[0m"

	cat > /root/openvpnport <<-END
	$openvpnport
	END

	exec</root/openvpnport
	while read line
	do
		echo "Port $line"
	done
	rm -f /root/openvpnport
else
	read -p "Input your desired OpenVPN Port: " port

	openvpnport="$(netstat -nlpt | grep -i openvpn | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo ""
	echo -e "\e[34;1mPort OpenVPN before editing:\e[0m"

	cat > /root/openvpnport <<-END
	$openvpnport
	END

	exec</root/openvpnport
	while read line
	do
		echo "Port $line"
		sed "/port $line/d" -i /etc/openvpn/server.conf
	done
	rm -f /root/openvpnport

	echo ""

	for i in ${port[@]}
	do
		netstat -nlpt | grep -w "$i" > /dev/null
		if [ $? -eq 0 ]; then
			netstat -nlpt | grep -i openvpn | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				sed -i "1 a\port $i" /etc/openvpn/server.conf
				echo -e "\e[032;1mPort $i added successfully\e[0m"
			fi
			
			netstat -nlpt | grep -i ssh | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenSSH\e[0m"
			fi
			
			netstat -nlpt | grep -i dropbear | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Dropbear\e[0m"
			fi
			
			netstat -nlpt | grep -i squid | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Squid\e[0m"
			fi
		else
			sed -i "1 a\port $i" /etc/openvpn/server.conf
			echo -e "\e[032;1mPort $i added successfully\e[0m"
		fi
	done

	echo ""
	service openvpn restart > /dev/null
	sleep 0.5
	rm -f /root/openvpnport
	openvpnport="$(netstat -nlpt | grep -i openvpn | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
	echo ""
	echo -e "\e[34;1mPort OpenVPN after editing:\e[0m"

	cat > /root/openvpnport <<-END
	$openvpnport
	END

	exec</root/openvpnport
	while read line
	do
		echo "Port $line"
	done
	rm -f /root/openvpnport
fi
cd
	;;
			48) # ==================================================================================================================
#!/bin/bash
# Created by http://www.vps-murah.net
# Modified by 0123456

#Check Curl
if [ ! -e /usr/bin/curl ]; then
	if [[ "$OS" = 'debian' ]]; then
	apt-get -y update && apt-get -y install curl
	else
	yum -y update && yum -y install curl
	fi
fi

# check registered ip
red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
echo "Connecting to Server..."
sleep 0.4
echo "Checking Permision..."
sleep 0.3
CEK=0123456
if [ "$CEK" != "0123456" ]; then
		echo -e "${red}Permission Denied!${NC}";
        echo $CEK;
        exit 0;
else
echo -e "${green}Permission Accepted...${NC}"
sleep 0.6
clear
fi

#Check ROOT
if [[ $USER != "root" ]]; then
	echo "Oops! root privileges needed."
	exit
fi

#Check OS
if [[ -e /etc/debian_version ]]; then
	OS=debian
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
else
	echo "This script only works on Debian and CentOS system"
	exit
fi

#Remove Temporary Files
rm -f /root/squidport

if [[ "$OS" = 'debian' ]]; then
	read -p "Insert Squid Port separated by 'space': " port
	squidport="$(cat /etc/squid3/squid.conf | grep -i http_port | awk '{print $2}')"
	echo ""
	echo -e "\e[34;1mPort Squid before editing:\e[0m"

	cat > /root/squidport <<-END
	$squidport
	END

	exec</root/squidport
	while read line
	do
		echo "Port $line"
		sed "/http_port $line/d" -i /etc/squid3/squid.conf
		#sed "s/Port $line//g" -i /etc/squid3/squid.conf
	done
	rm -f /root/squidport

	echo ""

	for i in ${port[@]}
	do
		netstat -nlpt | grep -w "$i" > /dev/null
		if [ $? -eq 0 ]; then
			netstat -nlpt | grep -i squid | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				sed -i "21 a\http_port $i" /etc/squid3/squid.conf
				echo -e "\e[032;1mPort $i added successfully\e[0m"
			fi
			
			netstat -nlpt | grep -i ssh | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenSSH\e[0m"
			fi
			
			netstat -nlpt | grep -i dropbear | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Dropbear\e[0m"
			fi
			
			netstat -nlpt | grep -i openvpn | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenVPN\e[0m"
			fi
		else
			sed -i "21 a\http_port $i" /etc/squid3/squid.conf
			echo -e "\e[032;1mPort $i added successfully\e[0m"
		fi
	done

	echo ""
	echo "Mohon Tunggu..."
	echo ""
	service squid3 restart > /dev/null
	sleep 0.5
	rm -f /root/squidport
	squidport="$(cat /etc/squid3/squid.conf | grep -i http_port | awk '{print $2}')"
	echo -e "\e[34;1mPort Squid after editing:\e[0m"

	cat > /root/squidport <<-END
	$squidport
	END

	exec</root/squidport
	while read line
	do
		echo "Port $line"
	done
	rm -f /root/squidport
else
	read -p "Insert Squid Port separated by 'space': " port
	squidport="$(cat /etc/squid/squid.conf | grep -i http_port | awk '{print $2}')"
	echo ""
	echo -e "\e[34;1mPort Squid before editing:\e[0m"
	cat > /root/squidport <<-END
	$squidport
	END
	exec</root/squidport
	while read line
	do
		echo "Port $line"
		sed "/http_port $line/d" -i /etc/squid/squid.conf
		#sed "s/Port $line//g" -i /etc/squid/squid.conf
	done
	rm -f /root/squidport
	echo ""
	for i in ${port[@]}
	do
		netstat -nlpt | grep -w "$i" > /dev/null
		if [ $? -eq 0 ]; then
			netstat -nlpt | grep -i squid | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				sed -i "27 a\http_port $i" /etc/squid/squid.conf
				echo -e "\e[032;1mPort $i added successfully\e[0m"
			fi
			
			netstat -nlpt | grep -i ssh | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenSSH\e[0m"
			fi
			
			netstat -nlpt | grep -i dropbear | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for Dropbear\e[0m"
			fi
			
			netstat -nlpt | grep -i openvpn | grep -w "$i" > /dev/null
			if [ $? -eq 0 ]; then
				echo -e "\e[031;1mPort $i failed to add. Port $i already used for OpenVPN\e[0m"
			fi
		else
			sed -i "27 a\http_port $i" /etc/squid/squid.conf
			echo -e "\e[032;1mPort $i added successfully\e[0m"
		fi
	done
	echo ""
	echo "Mohon Tunggu..."
	echo ""
	service squid restart > /dev/null
	sleep 0.5
	rm -f /root/squidport
	squidport="$(cat /etc/squid/squid.conf | grep -i http_port | awk '{print $2}')"
	echo -e "\e[34;1mPort Squid after editing:\e[0m"

	cat > /root/squidport <<-END
	$squidport
	END

	exec</root/squidport
	while read line
	do
		echo "Port $line"
	done
	rm -f /root/squidport
fi
cd

	;;
    00) # ==================================================================================================================
cd /usr/local/bin
wget -q -O z "https://raw.githubusercontent.com/MyGatherBk/MyAuto/master/Menu1"
chmod +x /usr/local/bin/z
z
	;;
esac
